name: pillar

packages:
  - packages/**

# Repository configuration
repository: https://github.com/Core-Soft-Development/pillar

command:
  bootstrap:
    # It seems so that running "pub get" in parallel has some issues (like
    # https://github.com/dart-lang/pub/issues/3404). Disabling this feature
    # makes the CI much more stable.
    runPubGetInParallel: false
    usePubspecOverrides: true

  clean:
    hooks:
      pre: melos exec -c 1 -- "flutter clean"

  version:
    # Allow versioning to update dependency constraints
    updateGitTagRefs: true
    # Update changelog files
    updateChangelogs: true
    # Link to repository for changelog
    linkToCommits: true
    # Workspace changelog
    workspaceChangelog: true
    # Update dependencies between packages
    updateDependentsVersionConstraints: true
    # Update dependencies in pubspec.yaml
    updateDependentsConstraints: true

scripts:
  analyze:
    run: |
      melos exec -c 1 --fail-fast -- \
        dart analyze . --fatal-infos
    description: |
      Run `dart analyze` in all packages.
       - Note: you can also rely on your IDEs Dart Analysis / Issues window.

  build:all:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter build apk"
    description: Build all example apps.
    select-package:
      dir-exists:
        - "android"

  test:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test"
    description: Run `flutter test` for all packages.

  test:integration:
    run: |
      melos exec -c 6 --fail-fast -- \
        "flutter test integration_test"
    description: Run all integration tests.

  format:
    run: |
      find . -name "*.dart" \
        ! -name "*.g.dart" \
        ! -name "*.freezed.dart" \
        ! -name "*.gr.dart" \
        ! -path "*/.*/*" \
        ! -path "*/.dart_tool/*" \
        ! -path "*/build/*" \
        | xargs dart format --set-exit-if-changed
    description: |
      Formats the code of all packages (Java, Objective-C, and Dart).
       - Requires `flutter_plugin_tools` (`pub global activate flutter_plugin_tools`).

  lint:all:
    run: |
      melos exec -c 1 --fail-fast -- \
        dart analyze . --fatal-infos
    description: |
      Run all static analysis checks.

  pub:get:
    run: |
      melos exec -c 6 --fail-fast -- \
        flutter pub get
    description: Run `flutter pub get` in all packages.

  pub:upgrade:
    run: |
      melos exec -c 6 --fail-fast -- \
        flutter pub upgrade
    description: Run `flutter pub upgrade` in all packages.

  build_runner:
    run: |
      melos exec -c 1 --fail-fast --depends-on="build_runner" -- \
        dart run build_runner build --delete-conflicting-outputs
    description: Run `build_runner` in all packages that depend on it.

  build_runner:watch:
    run: |
      melos exec -c 1 --fail-fast --depends-on="build_runner" -- \
        dart run build_runner watch --delete-conflicting-outputs
    description: Run `build_runner` in watch mode for all packages that depend on it.

  # Versioning Scripts
  version:check:
    run: melos list --long
    description: Check current packages and their versions

  version:patch:
    run: melos version --no-git-tag-version --no-git-commit-version --yes
    description: Version packages with patch increment

  version:minor:
    run: melos version --no-git-tag-version --no-git-commit-version --yes --prerelease --preid minor
    description: Version packages with minor increment

  version:major:
    run: melos version --no-git-tag-version --no-git-commit-version --yes --prerelease --preid major
    description: Version packages with major increment

  version:prerelease:
    run: melos version --no-git-tag-version --no-git-commit-version --yes --prerelease
    description: Version packages as prerelease

  version:graduate:
    run: melos version --no-git-tag-version --no-git-commit-version --yes --graduate
    description: Graduate prerelease versions to stable

  # Individual package versioning
  version:package:
    run: |
      if [ -z "$MELOS_PACKAGE" ]; then
        echo "Usage: melos run version:package --scope=package-name -- [patch|minor|major]"
        exit 1
      fi
      VERSION_TYPE=${1:-patch}
      melos version --no-git-tag-version --yes --scope="$MELOS_PACKAGE" --$VERSION_TYPE
    description: "Version a specific package (usage: melos run version:package --scope=package-name -- [patch|minor|major])"

  # Release scripts
  release:prepare:
    run: |
      echo "üöÄ Preparing release..."
      melos list --long
      echo "‚úÖ Release preparation complete. Review versions above."
    description: Prepare for release (show current versions)

  release:local:
    run: |
      echo "üöÄ Creating local release..."
      melos version --no-git-tag-version --no-git-commit-version --yes
      melos run pub:get
      echo "‚úÖ Local release complete"
    description: Create a local release (update versions and dependencies)

  release:publish:
    run: |
      echo "üöÄ Publishing release..."
      melos version --yes
      melos publish --yes
      echo "‚úÖ Release published"
    description: Publish release to pub.dev (creates git tags)

  # Dependency management
  deps:check:
    run: |
      echo "üì¶ Checking for outdated dependencies..."
      melos exec -- "flutter pub outdated"
    description: Check for outdated dependencies in all packages

  deps:upgrade:
    run: |
      echo "üì¶ Upgrading dependencies..."
      melos exec -- "flutter pub upgrade"
      melos bootstrap
    description: Upgrade dependencies in all packages

  deps:graph:
    run: |
      echo "üìä Generating dependency graph..."
      melos list --graph
    description: Show dependency graph between packages

  # Breaking changes detection
  breaking:check:
    run: |
      echo "üîç Checking for breaking changes..."
      melos exec --depends-on="pillar_core" -- \
        "echo 'Package \$MELOS_PACKAGE_NAME depends on pillar_core'"
    description: Check which packages depend on pillar_core (or other packages)

  breaking:update:
    run: |
      echo "üîÑ Updating packages after breaking changes..."
      melos version --dependent-versions --yes
      melos bootstrap
    description: Update all dependent packages when there are breaking changes

  # CI/CD helpers
  ci:version:
    run: |
      echo "ü§ñ CI: Checking version consistency..."
      melos list --long
      echo "‚úÖ All versions listed above"
    description: CI script to check version consistency

  ci:publish:
    run: |
      echo "ü§ñ CI: Publishing packages..."
      melos publish --yes
      echo "‚úÖ Packages published"
    description: CI script to publish packages
